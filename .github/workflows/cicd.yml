# Docs: https://docs.github.com/en/actions

name: CI/CD

permissions:
  contents: read

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Harden CI
      uses: step-security/harden-runner@v2.12.0
      with:
        egress-policy: audit
        allowed-endpoints: >
          api.github.com:443
          github.com:443

    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: "go.mod"

    - name: Fetch external JS deps
      run: go run bin/fetchclientdeps/fetchclientdeps.go

    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install uv
      uses: astral-sh/setup-uv@v6

    - name: Run pre-commit checks
      run: uvx pre-commit run --all-files

  build:
    runs-on: ubuntu-latest
    steps:
    - name: Harden CI
      uses: step-security/harden-runner@v2.12.0
      with:
        egress-policy: audit
        allowed-endpoints: >
          *.codecov.io:443
          *.docker.com:443
          *.docker.io:443
          *.ingest.us.sentry.io:443
          api.github.com:443
          cdn.datatables.net:443
          cdn.jsdelivr.net:443
          code.jquery.com:443
          codecov.io:443
          github.com:443
          go.dev:443
          golang.org:443
          keybase.io:443
          objects.githubusercontent.com:443
          proxy.golang.org:443
          storage.googleapis.com:443

    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: "go.mod"

    - name: Fetch external JS deps
      run: go run bin/fetchclientdeps/fetchclientdeps.go

    # TODO: maybe install sqlc, templ, and tsc code generation
    #  here as well. They would add some additional build time
    #  (mostly due to fetching their deps and building them),
    #  which is less than ideal. For now, it should be fine to
    #  do these on the developer's computer, and this can be
    #  enforced by pre-commit.

    - name: Compile, test, and cover
      run: go test -race -covermode=atomic -coverprofile=coverage.txt --coverpkg ./... ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage.txt
        env_vars: GITHUB_REF,GITHUB_COMMIT,GITHUB_USER,GITHUB_WORKFLOW
        fail_ci_if_error: false
      env:
        GITHUB_REF: ${{ github.ref }}
        GITHUB_COMMIT: ${{ github.sha }}
        GITHUB_USER: ${{ github.actor }}
        GITHUB_WORKFLOW: ${{ github.workflow }}

# TODO: get this working next
#  docker-build:
#    name: Build Docker image
#
#    runs-on: ubuntu-latest
#    timeout-minutes: 10
#
#    steps:
#
#      - name: Harden CI
#        uses: step-security/harden-runner@v2.12.0
#        with:
#          disable-sudo: true
#          egress-policy: audit
#          allowed-endpoints: >
#            *.docker.io:443
#
#      - name: Checkout source code
#        uses: actions/checkout@v4
#
#      - name: Build Docker image
#        run: ./bin/build
#
#      - name: Save Docker image
#        run: docker image save ranger-ims-server:dev | gzip -9 > docker_image.tgz
#
#      - name: Upload Docker image artifacts
#        uses: actions/upload-artifact@v4
#        with:
#          name: docker
#          path: docker_image.tgz
