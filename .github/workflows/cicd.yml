# Docs: https://docs.github.com/en/actions

name: CI/CD

permissions:
  contents: read

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]


jobs:

  lint:

    name: Linters

    runs-on: ubuntu-latest

    steps:
    - name: Harden CI
      uses: step-security/harden-runner@v2.12.0
      with:
        egress-policy: audit
        allowed-endpoints: >
          api.github.com:443
          github.com:443

    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: "go.mod"

    - name: Fetch external JS deps
      run: go run bin/fetchclientdeps/fetchclientdeps.go

    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Run pre-commit checks
      run: uvx pre-commit run --all-files


  build:

    name: Build application

    runs-on: ubuntu-latest

    steps:
    - name: Harden CI
      uses: step-security/harden-runner@v2.12.0
      with:
        egress-policy: audit
        allowed-endpoints: >
          *.codecov.io:443
          *.docker.com:443
          *.docker.io:443
          *.ingest.us.sentry.io:443
          api.github.com:443
          cdn.datatables.net:443
          cdn.jsdelivr.net:443
          code.jquery.com:443
          codecov.io:443
          github.com:443
          go.dev:443
          golang.org:443
          keybase.io:443
          objects.githubusercontent.com:443
          proxy.golang.org:443
          storage.googleapis.com:443

    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: "go.mod"

    - name: Fetch external JS deps
      run: go run bin/fetchclientdeps/fetchclientdeps.go

    # TODO: maybe install sqlc, templ, and tsc code generation
    #  here as well. They would add some additional build time
    #  (mostly due to fetching their deps and building them),
    #  which is less than ideal. For now, it should be fine to
    #  do these on the developer's computer, and this can be
    #  enforced by pre-commit.

    - name: Compile, test, and cover
      run: go test -race -covermode=atomic -coverprofile=coverage.txt --coverpkg ./... ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage.txt
        env_vars: GITHUB_REF,GITHUB_COMMIT,GITHUB_USER,GITHUB_WORKFLOW
        fail_ci_if_error: false
      env:
        GITHUB_REF: ${{ github.ref }}
        GITHUB_COMMIT: ${{ github.sha }}
        GITHUB_USER: ${{ github.actor }}
        GITHUB_WORKFLOW: ${{ github.workflow }}


  docker-build:

    name: Build Docker image

    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:

      - name: Harden CI
        uses: step-security/harden-runner@v2.12.0
        with:
          disable-sudo: true
          egress-policy: audit
          allowed-endpoints: >
            *.docker.io:443

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build --tag=ranger-ims-go .

      - name: Save Docker image
        run: docker image save ranger-ims-go | gzip -9 > docker_image.tgz

      - name: Upload Docker image artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker
          path: docker_image.tgz


  docker-test:

    name: Test Docker image

    needs: [docker-build]

    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:

      - name: Harden CI
        uses: step-security/harden-runner@v2.10.4
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            *.docker.com:443
            *.docker.io:443
            *.github.com:443
            github.com:443

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Download Docker image artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker

      - name: Load Docker image
        run: gzip --uncompress --stdout docker_image.tgz | docker image load

      - name: Test Docker image
        run: ./bin/test_docker


  deploy-staging:
    name: Deploy image built from master branch to the staging environment

    needs: [lint, build, docker-test]
    # if: ${{ github.ref == 'refs/heads/master' }}

    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:

      - name: Harden CI
        uses: step-security/harden-runner@v2.10.4
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            *.github.com:443
            *.githubusercontent.com:443
            *.amazonaws.com:443
            github.com:443

      - name: Download Docker image artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker

      - name: Load Docker image
        run: gzip --uncompress --stdout docker_image.tgz | docker image load

      - name: Deploy to staging
        run: env || false
        env:
          # https://github.com/burningmantech/ranger-ims-server/settings/secrets
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_ECR_IMAGE_NAME: ${{ secrets.AWS_ECR_IMAGE_NAME }}
          AWS_ECS_CLUSTER_STAGING: rangers
          AWS_ECS_SERVICE_STAGING: ${{ secrets.AWS_ECS_SERVICE_STAGING }}
          NOTIFY_SMTP_HOST: ${{ secrets.NOTIFY_SMTP_HOST }}
          NOTIFY_SMTP_USER: ${{ secrets.NOTIFY_SMTP_USER }}
          NOTIFY_SMTP_PASSWORD: ${{ secrets.NOTIFY_SMTP_PASSWORD }}
          NOTIFY_EMAIL_RECIPIENT: ${{ secrets.NOTIFY_EMAIL_RECIPIENT }}
          NOTIFY_EMAIL_SENDER: ${{ secrets.NOTIFY_EMAIL_SENDER }}
          CI: true
          PROJECT_NAME: Ranger IMS Server
          REPOSITORY_ID: ${{ github.repository }}
          BUILD_NUMBER: 0
          BUILD_URL: https://github.com/burningmantech/ranger-ims-server/commit/${{ github.sha }}/checks
          COMMIT_ID: ${{ github.event.head_commit.id }}
          COMMIT_URL: ${{ github.event.head_commit.url }}
          COMMIT_AUTHOR_USER: ${{ github.event.head_commit.author.username }}
          COMMIT_AUTHOR_NAME: ${{ github.event.head_commit.author.name }}
          COMMIT_AUTHOR_EMAIL: ${{ github.event.head_commit.author.email }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
