# Docs: https://docs.github.com/en/actions


name: Deploy to production
run-name: Deploy to production by @${{ github.actor }}

on: workflow_dispatch


env:
  AWS_DEPLOY_ROLE: "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ranger-gha-deploy"
  AWS_ECR_IMAGE_NAME: "/rangers/ranger-ims-go"
  AWS_ECS_CLUSTER: rangers
  AWS_ECS_CONTAINER_NAME: ranger-ims-go
  AWS_ECS_SERVICE_PRODUCTION: ranger-ims-go-staging-fg
  AWS_ECS_TASK_DEFINITION_ARN_PRODUCTION: "arn:aws:ecs:us-west-2:${{ secrets.AWS_ACCOUNT_ID }}:task-definition/ranger-ims-go-production-fg"
  AWS_ECS_TASK_DEFINITION_FAMILY: ranger-ims-go-production-fg
  AWS_REGION: us-west-2

jobs:

  push-to-production:

    runs-on: ubuntu-latest

    permissions:
      id-token: write

    steps:

      - name: Harden CI
        uses: step-security/harden-runner@v2.10.2
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            *.amazonaws.com:443
            *.docker.io:443

      - name: Check user
        if: ${{ ! contains('["wsanchez", "mikeburg", "srabraham"]', github.actor) }}
        run: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_DEPLOY_ROLE }}
          role-session-name: ranger-gha-${{ github.repository_id }}-${{ github.job }}-${{ github.run_id }}

      - name: Login to AWS ECR
        id: aws-login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push docker image to Amazon ECR
        run: |
          image_repository="${{ steps.aws-login-ecr.outputs.registry }}${{ env.AWS_ECR_IMAGE_NAME }}"
          docker login
          # Push SHA tag
          docker pull "${image_repository}:staging"
          docker tag "${image_repository}:staging" "${image_repository}:${{ github.sha }}"
          docker push "${image_repository}:${{ github.sha }}"
          # Push production rollback tag
          if docker pull "${image_repository}:production"; then
            echo "Pushing rollback tag for production"
            docker tag "${image_repository}:production" "${image_repository}:production_rollback"
            docker push "${image_repository}:production_rollback"
          fi
          # Push production tag
          echo "Pushing production tag"
          docker tag "${image_repository}:staging" "${image_repository}:production"
          docker push "${image_repository}:production"

      - name: Get current date
        id: date
        run: echo "date=$(date "+%Y-%m-%dT%H:%M:%S")" >> "${GITHUB_OUTPUT}"

      - name: Fetch and update current task definition
        id: new-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-arn: "${{ env.AWS_ECS_TASK_DEFINITION_ARN_PRODUCTION }}"
          task-definition-family: "${{ env.AWS_ECS_TASK_DEFINITION_FAMILY }}"
          container-name: "${{ env.AWS_ECS_CONTAINER_NAME }}"
          image: "${{ steps.aws-login-ecr.outputs.registry }}${{ env.AWS_ECR_IMAGE_NAME }}:${{ github.sha }}"
          environment-variables: |
            GHA_ACTOR_ID=${{ github.actor_id }}
            GHA_ACTOR=${{ github.actor }}
            GHA_EVENT_NAME=${{ github.event_name }}
            GHA_JOB=${{ github.job }}
            GHA_REF=${{ github.ref }}
            GHA_RUN_ATTEMPT=${{ github.run_attempt }}
            GHA_RUN_ID=${{ github.run_id }}
            GHA_RUN_NUMBER=${{ github.run_number }}
            GHA_TRIGGERING_ACTOR=${{ github.triggering_actor }}
            GHA_WORKFLOW=${{ github.workflow }}
            GIT_SHA=${{ github.sha }}
            TASK_UPDATED=${{ steps.date.outputs.date }}

      - name: Update task definition and ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: "${{ steps.new-task-definition.outputs.task-definition }}"
          service: "${{ env.AWS_ECS_SERVICE_PRODUCTION }}"
          cluster: "${{ env.AWS_ECS_CLUSTER }}"
          wait-for-service-stability: true
