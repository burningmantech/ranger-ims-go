// See the file COPYRIGHT for copyright information.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"bufio"
	"bytes"
	"context"
	"fmt"
	"io"
	"io/fs"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"
)

const generatedCodeTestLine = "// Code generated by"

const doubleSlashLicenseTestLine = "// See the file COPYRIGHT for copyright information."

const doubleSlashLicense = `//
// See the file COPYRIGHT for copyright information.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

`

func main() {
	ctx := context.Background()
	ctx, cancel := context.WithTimeout(ctx, 10*time.Minute)
	defer cancel()

	repo, err := os.OpenRoot(repoRoot(ctx))
	must(err)

	must(fs.WalkDir(repo.FS(), ".", func(path string, d fs.DirEntry, err error) error {
		if strings.Contains(path, "/node_modules/") {
			return nil
		}
		// conveniently, all of .go, .templ, and .ts support double slashed comments
		relevantType := strings.HasSuffix(d.Name(), ".go") ||
			strings.HasSuffix(d.Name(), ".templ") ||
			strings.HasSuffix(d.Name(), ".ts")
		if !d.IsDir() && relevantType {
			if needsLicense(repo, path) {
				addLicense(repo, path)
				log.Printf("Added license to %v", path)
			}
		}
		return nil
	}))
}

func needsLicense(repo *os.Root, filename string) bool {
	f, err := repo.Open(filename)
	must(err)
	defer shut(f)
	scanner := bufio.NewScanner(f)
	for scanner.Scan() {
		if strings.HasPrefix(scanner.Text(), doubleSlashLicenseTestLine) {
			// log.Printf("%v already has license", filename)
			return false
		}
		if strings.HasPrefix(scanner.Text(), generatedCodeTestLine) {
			// log.Printf("%v is a generated code file", filename)
			return false
		}
	}
	return true
}

func addLicense(repo *os.Root, filename string) {
	// Read in the current version of the file.
	contents, err := repo.ReadFile(filename)
	must(err)

	// Open and truncate the  file.
	f, err := repo.Create(filename)
	must(err)

	// WriteResponse the header, then the original file contents.
	_, err = f.WriteString(doubleSlashLicense)
	must(err)
	scanner := bufio.NewScanner(bytes.NewReader(contents))
	for scanner.Scan() {
		_, err = f.WriteString(scanner.Text())
		must(err)
		_, err = f.WriteString("\n")
		must(err)
	}
	must(f.Close())
}

func repoRoot(ctx context.Context) string {
	// The GOMOD variable gives an absolute path to go.mod, which we use to find
	// the repo root directory
	cmd := exec.CommandContext(ctx, "go", "env", "GOMOD")
	goModPathBytes, err := cmd.CombinedOutput()
	must(err)
	repoRoot := filepath.Dir(strings.TrimSpace(string(goModPathBytes)))
	if !pathExists(os.Stat(repoRoot)) {
		must(fmt.Errorf("repo root %v does not exist", repoRoot))
	}
	return repoRoot
}

func pathExists(_ os.FileInfo, err error) bool {
	return !os.IsNotExist(err)
}

func must(err error) {
	if err != nil {
		panic(err)
	}
}

func shut(c io.Closer) {
	_ = c.Close()
}
