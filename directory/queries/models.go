// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package queries

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type PersonGenderIdentity string

const (
	PersonGenderIdentityCisFemale   PersonGenderIdentity = "cis-female"
	PersonGenderIdentityCisMale     PersonGenderIdentity = "cis-male"
	PersonGenderIdentityCustom      PersonGenderIdentity = "custom"
	PersonGenderIdentityFemale      PersonGenderIdentity = "female"
	PersonGenderIdentityFluid       PersonGenderIdentity = "fluid"
	PersonGenderIdentityMale        PersonGenderIdentity = "male"
	PersonGenderIdentityValue6      PersonGenderIdentity = ""
	PersonGenderIdentityNonBinary   PersonGenderIdentity = "non-binary"
	PersonGenderIdentityQueer       PersonGenderIdentity = "queer"
	PersonGenderIdentityTransFemale PersonGenderIdentity = "trans-female"
	PersonGenderIdentityTransMale   PersonGenderIdentity = "trans-male"
	PersonGenderIdentityTwoSpirit   PersonGenderIdentity = "two-spirit"
)

func (e *PersonGenderIdentity) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PersonGenderIdentity(s)
	case string:
		*e = PersonGenderIdentity(s)
	default:
		return fmt.Errorf("unsupported scan type for PersonGenderIdentity: %T", src)
	}
	return nil
}

type NullPersonGenderIdentity struct {
	PersonGenderIdentity PersonGenderIdentity
	Valid                bool // Valid is true if PersonGenderIdentity is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPersonGenderIdentity) Scan(value interface{}) error {
	if value == nil {
		ns.PersonGenderIdentity, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PersonGenderIdentity.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPersonGenderIdentity) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PersonGenderIdentity), nil
}

type PersonPronouns string

const (
	PersonPronounsValue0  PersonPronouns = ""
	PersonPronounsFemale  PersonPronouns = "female"
	PersonPronounsMale    PersonPronouns = "male"
	PersonPronounsNeutral PersonPronouns = "neutral"
	PersonPronounsCustom  PersonPronouns = "custom"
)

func (e *PersonPronouns) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PersonPronouns(s)
	case string:
		*e = PersonPronouns(s)
	default:
		return fmt.Errorf("unsupported scan type for PersonPronouns: %T", src)
	}
	return nil
}

type NullPersonPronouns struct {
	PersonPronouns PersonPronouns
	Valid          bool // Valid is true if PersonPronouns is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPersonPronouns) Scan(value interface{}) error {
	if value == nil {
		ns.PersonPronouns, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PersonPronouns.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPersonPronouns) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PersonPronouns), nil
}

type PersonStatus string

const (
	PersonStatusActive            PersonStatus = "active"
	PersonStatusAlpha             PersonStatus = "alpha"
	PersonStatusAuditor           PersonStatus = "auditor"
	PersonStatusBonked            PersonStatus = "bonked"
	PersonStatusEchelon           PersonStatus = "echelon"
	PersonStatusDeceased          PersonStatus = "deceased"
	PersonStatusDismissed         PersonStatus = "dismissed"
	PersonStatusInactive          PersonStatus = "inactive"
	PersonStatusInactiveextension PersonStatus = "inactive extension"
	PersonStatusPastprospective   PersonStatus = "past prospective"
	PersonStatusProspective       PersonStatus = "prospective"
	PersonStatusResigned          PersonStatus = "resigned"
	PersonStatusRetired           PersonStatus = "retired"
	PersonStatusSuspended         PersonStatus = "suspended"
	PersonStatusUberbonked        PersonStatus = "uberbonked"
)

func (e *PersonStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PersonStatus(s)
	case string:
		*e = PersonStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PersonStatus: %T", src)
	}
	return nil
}

type NullPersonStatus struct {
	PersonStatus PersonStatus
	Valid        bool // Valid is true if PersonStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPersonStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PersonStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PersonStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPersonStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PersonStatus), nil
}

type PositionTeamCategory string

const (
	PositionTeamCategoryPublic     PositionTeamCategory = "public"
	PositionTeamCategoryAllMembers PositionTeamCategory = "all_members"
	PositionTeamCategoryOptional   PositionTeamCategory = "optional"
)

func (e *PositionTeamCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PositionTeamCategory(s)
	case string:
		*e = PositionTeamCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for PositionTeamCategory: %T", src)
	}
	return nil
}

type NullPositionTeamCategory struct {
	PositionTeamCategory PositionTeamCategory
	Valid                bool // Valid is true if PositionTeamCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPositionTeamCategory) Scan(value interface{}) error {
	if value == nil {
		ns.PositionTeamCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PositionTeamCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPositionTeamCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PositionTeamCategory), nil
}

type Person struct {
	ID                 int64
	FirstName          string
	Mi                 string
	LastName           string
	Callsign           string
	Street1            string
	Street2            string
	Apt                string
	City               string
	State              string
	Zip                string
	Country            string
	HomePhone          string
	AltPhone           string
	Email              sql.NullString
	CampLocation       string
	OnSite             bool
	VehicleBlacklisted bool
	DateVerified       sql.NullTime
	Password           sql.NullString
	CreatedAt          sql.NullTime
	HasNoteOnFile      bool
	CallsignApproved   bool
	ShirtSize          sql.NullString
	Status             PersonStatus
	StatusDate         sql.NullTime
	Tpassword          sql.NullString
	TpasswordExpire    sql.NullInt32
	// Most recent modification time.
	UpdatedAt                time.Time
	ShirtStyle               sql.NullString
	GenderCustom             sql.NullString
	Bpguid                   sql.NullString
	Sfuid                    sql.NullString
	EmergencyContact         sql.NullString
	Vintage                  sql.NullBool
	SmsOffPlaya              sql.NullString
	SmsOnPlaya               sql.NullString
	SmsOffPlayaStopped       bool
	SmsOnPlayaStopped        bool
	SmsOffPlayaVerified      bool
	SmsOnPlayaVerified       bool
	SmsOffPlayaCode          sql.NullString
	SmsOnPlayaCode           sql.NullString
	TimesheetConfirmed       bool
	TimesheetConfirmedAt     sql.NullTime
	CallsignNormalized       string
	CallsignSoundex          string
	Message                  sql.NullString
	MessageUpdatedAt         sql.NullTime
	BehavioralAgreement      bool
	CallsignPronounce        sql.NullString
	LoggedInAt               sql.NullTime
	LastSeenAt               sql.NullTime
	PersonPhotoID            sql.NullInt64
	KnownRangers             sql.NullString
	KnownPnvs                sql.NullString
	LmsID                    sql.NullString
	ReviewedPiAt             sql.NullTime
	Pronouns                 PersonPronouns
	PronounsCustom           string
	PiReviewedForDashboardAt sql.NullTime
	LmsUsername              sql.NullString
	IsBouncing               bool
	TshirtSwagID             sql.NullInt32
	TshirtSecondarySwagID    sql.NullInt32
	LongSleeveSwagID         sql.NullInt32
	VanityChangedAt          sql.NullTime
	UsedVanityChange         bool
	EmployeeID               sql.NullString
	GenderIdentity           PersonGenderIdentity
	PreferredName            string
	YearsSeen                sql.NullString
	YearsAsContributor       sql.NullString
	YearsAsRanger            sql.NullString
	YearsCombined            sql.NullString
}

// links person to position
type PersonPosition struct {
	PersonID   uint64
	PositionID uint64
}

type PersonTeam struct {
	ID        uint64
	PersonID  int32
	TeamID    int32
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

type Position struct {
	ID              uint64
	Title           string
	NewUserEligible bool
	AllRangers      bool
	CountHours      bool
	// Min suggested Rangers per slot
	Min int32
	// Max suggested Rangers per slot
	Max                        sql.NullInt32
	OnSlReport                 sql.NullBool
	OnTrainerReport            bool
	ShortTitle                 sql.NullString
	Type                       sql.NullString
	TrainingPositionID         sql.NullInt64
	ContactEmail               sql.NullString
	PreventMultipleEnrollments bool
	Active                     bool
	AlertWhenEmpty             bool
	TeamID                     sql.NullInt32
	RequireTrainingForRoles    bool
	TeamCategory               PositionTeamCategory
	AlertWhenBecomesEmpty      bool
	AlertWhenNoTrainers        bool
	Paycode                    sql.NullString
	ResourceTag                sql.NullString
	DeselectOnTeamJoin         bool
	NoPayrollHoursAdjustment   bool
	NoTrainingRequired         bool
	AutoSignOut                bool
	SignOutHourCap             float64
	MvrEligible                bool
	PvrEligible                bool
	ParentPositionID           sql.NullInt32
	NotTimesheetEligible       bool
	CruiseDirection            bool
	MvrSignupEligible          bool
}

type Team struct {
	ID          uint64
	Title       string
	Type        string
	Active      bool
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	MvrEligible bool
	PvrEligible bool
	Email       sql.NullString
	Description sql.NullString
}
