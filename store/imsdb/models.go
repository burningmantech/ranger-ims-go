// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package imsdb

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type EventAccessMode string

const (
	EventAccessModeRead   EventAccessMode = "read"
	EventAccessModeWrite  EventAccessMode = "write"
	EventAccessModeReport EventAccessMode = "report"
)

func (e *EventAccessMode) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventAccessMode(s)
	case string:
		*e = EventAccessMode(s)
	default:
		return fmt.Errorf("unsupported scan type for EventAccessMode: %T", src)
	}
	return nil
}

type NullEventAccessMode struct {
	EventAccessMode EventAccessMode
	Valid           bool // Valid is true if EventAccessMode is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventAccessMode) Scan(value interface{}) error {
	if value == nil {
		ns.EventAccessMode, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventAccessMode.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventAccessMode) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventAccessMode), nil
}

func (e EventAccessMode) Valid() bool {
	switch e {
	case EventAccessModeRead,
		EventAccessModeWrite,
		EventAccessModeReport:
		return true
	}
	return false
}

func AllEventAccessModeValues() []EventAccessMode {
	return []EventAccessMode{
		EventAccessModeRead,
		EventAccessModeWrite,
		EventAccessModeReport,
	}
}

type EventAccessValidity string

const (
	EventAccessValidityAlways EventAccessValidity = "always"
	EventAccessValidityOnsite EventAccessValidity = "onsite"
)

func (e *EventAccessValidity) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventAccessValidity(s)
	case string:
		*e = EventAccessValidity(s)
	default:
		return fmt.Errorf("unsupported scan type for EventAccessValidity: %T", src)
	}
	return nil
}

type NullEventAccessValidity struct {
	EventAccessValidity EventAccessValidity
	Valid               bool // Valid is true if EventAccessValidity is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventAccessValidity) Scan(value interface{}) error {
	if value == nil {
		ns.EventAccessValidity, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventAccessValidity.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventAccessValidity) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventAccessValidity), nil
}

func (e EventAccessValidity) Valid() bool {
	switch e {
	case EventAccessValidityAlways,
		EventAccessValidityOnsite:
		return true
	}
	return false
}

func AllEventAccessValidityValues() []EventAccessValidity {
	return []EventAccessValidity{
		EventAccessValidityAlways,
		EventAccessValidityOnsite,
	}
}

type IncidentState string

const (
	IncidentStateNew        IncidentState = "new"
	IncidentStateOnHold     IncidentState = "on_hold"
	IncidentStateDispatched IncidentState = "dispatched"
	IncidentStateOnScene    IncidentState = "on_scene"
	IncidentStateClosed     IncidentState = "closed"
)

func (e *IncidentState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IncidentState(s)
	case string:
		*e = IncidentState(s)
	default:
		return fmt.Errorf("unsupported scan type for IncidentState: %T", src)
	}
	return nil
}

type NullIncidentState struct {
	IncidentState IncidentState
	Valid         bool // Valid is true if IncidentState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIncidentState) Scan(value interface{}) error {
	if value == nil {
		ns.IncidentState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IncidentState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIncidentState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IncidentState), nil
}

func (e IncidentState) Valid() bool {
	switch e {
	case IncidentStateNew,
		IncidentStateOnHold,
		IncidentStateDispatched,
		IncidentStateOnScene,
		IncidentStateClosed:
		return true
	}
	return false
}

func AllIncidentStateValues() []IncidentState {
	return []IncidentState{
		IncidentStateNew,
		IncidentStateOnHold,
		IncidentStateDispatched,
		IncidentStateOnScene,
		IncidentStateClosed,
	}
}

type ConcentricStreet struct {
	Event int32
	ID    string
	Name  string
}

type Event struct {
	ID   int32
	Name string
}

type EventAccess struct {
	ID         int32
	Event      int32
	Expression string
	Mode       EventAccessMode
	Validity   EventAccessValidity
}

type FieldReport struct {
	Event          int32
	Number         int32
	Created        float64
	Summary        sql.NullString
	IncidentNumber sql.NullInt32
}

type FieldReportReportEntry struct {
	Event             int32
	FieldReportNumber int32
	ReportEntry       int32
}

type Incident struct {
	Event                int32
	Number               int32
	Created              float64
	Priority             int8
	State                IncidentState
	Summary              sql.NullString
	LocationName         sql.NullString
	LocationConcentric   sql.NullString
	LocationRadialHour   sql.NullInt16
	LocationRadialMinute sql.NullInt16
	LocationDescription  sql.NullString
}

type IncidentIncidentType struct {
	Event          int32
	IncidentNumber int32
	IncidentType   int32
}

type IncidentRanger struct {
	ID             int32
	Event          int32
	IncidentNumber int32
	RangerHandle   string
}

type IncidentReportEntry struct {
	Event          int32
	IncidentNumber int32
	ReportEntry    int32
}

type IncidentType struct {
	ID     int32
	Name   string
	Hidden bool
}

type ReportEntry struct {
	ID           int32
	Author       string
	Text         string
	Created      float64
	Generated    bool
	Stricken     bool
	AttachedFile sql.NullString
}

type SchemaInfo struct {
	Version int16
}
