// Code generated by tsgo. DO NOT EDIT.

//
// See the file COPYRIGHT for copyright information.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
"use strict";
import * as ims from "./ims.js";
//
// Filters
//
let filterMinTime = null;
let filterMaxTime = null;
let filterUserName = null;
let filterPath = null;
//
// Initialize UI
//
initAdminActionLogsPage();
let actionLogsTable = null;
async function initAdminActionLogsPage() {
    const initResult = await ims.commonPageInit();
    if (!initResult.authInfo.authenticated) {
        await ims.redirectToLogin();
        return;
    }
    window.fetchActionLogs = fetchActionLogs;
    window.updateTable = updateTable;
    const yesterday = new Date();
    yesterday.setDate(new Date().getDate() - 1);
    document.getElementById("filter_min_time").value = nerdDateTime.format(yesterday);
    updateFilters();
    // DataTable.ext.errMode = "none";
    actionLogsTable = new DataTable("#action_logs_table", {
        "deferRender": true,
        "paging": true,
        "lengthChange": false,
        "searching": true,
        "processing": true,
        "scrollX": false,
        "scrollY": false,
        "layout": {
            "topStart": null,
            "topEnd": null,
            "bottomStart": "info",
            "bottomEnd": "paging",
        },
        "pageLength": 100,
        "ajax": function (_data, callback, _settings) {
            async function doAjax() {
                const params = new URLSearchParams({});
                if (filterMinTime) {
                    params.set("minTimeUnixMs", filterMinTime.getTime().toString());
                }
                if (filterMaxTime) {
                    params.set("maxTimeUnixMs", filterMaxTime.getTime().toString());
                }
                if (filterUserName) {
                    params.set("userName", filterUserName);
                }
                if (filterPath) {
                    params.set("path", filterPath);
                }
                const { json, err } = await ims.fetchNoThrow(`${url_actionlogs}?${params.toString()}`, null);
                if (err != null || json == null) {
                    ims.setErrorMessage(`Failed to load table: ${err}`);
                    return;
                }
                callback({ data: json });
            }
            doAjax();
        },
        "columns": [
            {
                "name": "log_id",
                "className": "text-right",
                "data": "id",
                "defaultContent": null,
                "render": DataTable.render.number(),
                "cellType": "th",
            },
            {
                "name": "log_time",
                "className": "text-center",
                "data": "created_at",
                "defaultContent": null,
                "render": renderDate,
            },
            {
                "name": "log_user_name",
                "className": "text-center",
                "data": "user_name",
                "defaultContent": null,
                "render": DataTable.render.text(),
            },
            {
                "name": "log_page",
                "className": "text-center",
                "data": "referrer",
                "defaultContent": null,
                "render": renderPage,
            },
            {
                "name": "log_method",
                "className": "text-center",
                "data": "method",
                "defaultContent": null,
                "render": DataTable.render.text(),
            },
            {
                "name": "log_path",
                "className": "text-center",
                "data": "path",
                "defaultContent": null,
                "render": DataTable.render.text(),
            },
            {
                "name": "log_position_name",
                "className": "text-center",
                "data": "position_name",
                "defaultContent": null,
                "render": DataTable.render.text(),
            },
            {
                "name": "log_client_address",
                "className": "text-center",
                "data": "client_address",
                "defaultContent": null,
                "render": DataTable.render.text(),
            },
            {
                "name": "log_duration",
                "className": "text-center",
                "data": "duration",
                "defaultContent": null,
                "render": DataTable.render.text(),
            },
        ],
        "order": [
            // time descending
            [1, "dsc"],
        ],
    });
    actionLogsTable.draw();
}
function renderPage(pagePath, type, _data) {
    pagePath = pagePath ?? "";
    switch (type) {
        case "display":
            if (pagePath == "") {
                return "";
            }
            const link = document.createElement("a");
            link.href = pagePath;
            link.target = "_blank";
            link.text = pagePath;
            return link.outerHTML;
        case "filter":
        case "type":
        case "sort":
            return pagePath;
    }
    return undefined;
}
async function fetchActionLogs() {
    const { json, err } = await ims.fetchNoThrow(url_actionlogs, {});
    if (err != null) {
        throw err;
    }
    const actionLogsText = JSON.stringify(json, null, 2);
    const targetPre = document.getElementById("action-logs");
    targetPre.textContent = actionLogsText;
    const targetDiv = document.getElementById("show-action-logs-div");
    targetDiv.style.display = "";
}
async function updateTable(_el) {
    updateFilters();
    actionLogsTable.ajax.reload();
    actionLogsTable.draw();
}
function updateFilters() {
    const filterMinTimeInput = document.getElementById("filter_min_time");
    const filterMaxTimeInput = document.getElementById("filter_max_time");
    const filterUserNameInput = document.getElementById("filter_user_name");
    const filterPathInput = document.getElementById("filter_path");
    if (filterMinTimeInput.value) {
        filterMinTime = new Date(filterMinTimeInput.value);
    }
    else {
        filterMinTime = null;
    }
    if (filterMaxTimeInput.value) {
        filterMaxTime = new Date(filterMaxTimeInput.value);
    }
    else {
        filterMaxTime = null;
    }
    filterUserName = filterUserNameInput.value ? filterUserNameInput.value : null;
    filterPath = filterPathInput.value ? filterPathInput.value : null;
}
const nerdDateTime = new Intl.DateTimeFormat("sv-SE", {
    // weekday: "short",
    year: "numeric",
    month: "numeric",
    day: "numeric",
    hour: "numeric",
    hour12: false,
    minute: "numeric",
    second: "numeric",
    // timeZoneName: "short",
    // timeZone not specified; will use user's timezone
});
function renderDate(date, type, _incident) {
    const d = Date.parse(date);
    const fullDate = ims.fullDateTime.format(d);
    switch (type) {
        case "display":
            return `<span title="${fullDate}">${nerdDateTime.format(d)}</span>`;
        case "filter":
            return nerdDateTime.format(d);
        case "type":
        case "sort":
            return d;
    }
    return undefined;
}
