// Code generated by tsgo. DO NOT EDIT.

//
// See the file COPYRIGHT for copyright information.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
"use strict";
import * as ims from "./ims.js";
//
// Initialize UI
//
initAdminStreetsPage();
async function initAdminStreetsPage() {
    const initResult = await ims.commonPageInit();
    if (!initResult.authInfo.authenticated) {
        await ims.redirectToLogin();
        return;
    }
    window.addStreet = addStreet;
    window.removeStreet = removeStreet;
    events = await initResult.eventDatas ?? [];
    const { err } = await loadStreets();
    if (err == null) {
        drawStreets();
    }
    ims.hideLoadingOverlay();
}
let events = [];
let streets = {};
async function loadStreets() {
    const { json, err } = await ims.fetchNoThrow(url_streets, null);
    if (err != null) {
        const message = `Failed to load streets: ${err}`;
        console.error(message);
        window.alert(message);
        return { err: message };
    }
    streets = json;
    return { err: null };
}
let _streetsTemplate = null;
let _streetsEntryTemplate = null;
function drawStreets() {
    const container = document.getElementById("event_streets_container");
    if (_streetsTemplate == null) {
        _streetsTemplate = container.querySelectorAll(".event_streets")[0];
        _streetsEntryTemplate = _streetsTemplate.querySelector("ul").querySelector("li");
    }
    container.replaceChildren();
    for (const eventIDStr in streets) {
        const eventID = ims.parseInt10(eventIDStr);
        if (eventID == null) {
            alert("error parsing eventID");
            return;
        }
        const eventStreets = _streetsTemplate.cloneNode(true);
        // Add an id to the element for future reference
        eventStreets.id = `event_streets_${eventID.toString()}`;
        // Add to container
        container.append(eventStreets);
        updateEventStreets(eventID);
    }
}
function updateEventStreets(eventID) {
    const eventStreets = streets[eventID];
    if (eventStreets == null) {
        return;
    }
    const eventStreetsElement = document.getElementById("event_streets_" + eventID.toString());
    let eventName = "";
    for (const e of events) {
        if (e.id === eventID) {
            eventName = e.name;
            break;
        }
    }
    // Set displayed event name
    eventStreetsElement.getElementsByClassName("event_name")[0].textContent = eventName;
    eventStreetsElement.getElementsByClassName("event_name")[0].dataset["eventId"] = eventID.toString();
    const entryContainer = eventStreetsElement.getElementsByClassName("list-group")[0];
    entryContainer.replaceChildren();
    for (const streetID in eventStreets) {
        const streetName = eventStreets[streetID];
        const entryItem = _streetsEntryTemplate.cloneNode(true);
        entryItem.append(streetID + ": " + streetName);
        entryItem.dataset["streetId"] = streetID;
        entryContainer.append(entryItem);
    }
}
async function addStreet(sender) {
    const container = sender.closest(".event_streets");
    const eventNameContainer = container.getElementsByClassName("event_name")[0];
    const eventID = ims.parseInt10(eventNameContainer.dataset["eventId"]);
    if (eventID == null) {
        alert("Found no event ID");
        return;
    }
    const expression = sender.value.trim();
    const splitInd = expression.indexOf(":");
    if (splitInd === -1) {
        alert("Expected a ':' in the expression");
        return;
    }
    // e.g. "123: Abraham Ave" becomes "123" and "Abraham Ave"
    const id = expression.substring(0, splitInd);
    const name = expression.substring(splitInd + 1).trim();
    const edits = {};
    edits[eventID] = {};
    edits[eventID][id] = name;
    const { err } = await sendStreets(edits);
    await loadStreets();
    updateEventStreets(eventID);
    if (err != null) {
        ims.controlHasError(sender);
        return;
    }
    else {
        ims.controlHasSuccess(sender);
    }
    sender.value = "";
}
function removeStreet(_sender) {
    alert("Remove is unsupported for streets. Do this via SQL instead.");
}
async function sendStreets(edits) {
    const { err } = await ims.fetchNoThrow(url_streets, {
        body: JSON.stringify(edits),
    });
    if (err != null) {
        const message = `Failed to edit streets:\n${err}`;
        console.log(message);
        window.alert(message);
        return { err: err };
    }
    return { err: null };
}
