// Code generated by tsgo. DO NOT EDIT.

//
// See the file COPYRIGHT for copyright information.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
"use strict";
import * as ims from "./ims.js";
let destinationsTable = null;
const _destSearchDelayMs = 250;
let _destSearchDelayTimer = undefined;
let _destShowRows = null;
const destDefaultRows = "25";
//
// Initialize UI
//
initDestinationsPage();
async function initDestinationsPage() {
    const initResult = await ims.commonPageInit();
    if (!initResult.authInfo.authenticated) {
        await ims.redirectToLogin();
        return;
    }
    if (!ims.eventAccess.readIncidents && !ims.eventAccess.writeFieldReports) {
        ims.setErrorMessage(`You're not currently authorized to view Destinations in Event "${ims.pathIds.eventName}".`);
        ims.hideLoadingOverlay();
        return;
    }
    window.destShowRows = destShowRows;
    ims.disableEditing();
    initDestinationsTable();
    // Keyboard shortcuts
    document.addEventListener("keydown", function (e) {
        // No shortcuts when an input field is active
        if (ims.blockKeyboardShortcutFieldActive()) {
            return;
        }
        // No shortcuts when ctrl, alt, or meta is being held down
        if (e.altKey || e.ctrlKey || e.metaKey) {
            return;
        }
        // / --> jump to search box
        if (e.key === "/") {
            // don't immediately input a "/" into the search box
            e.preventDefault();
            document.getElementById("search_input").focus();
        }
    });
}
//
// Dispatch queue table
//
function initDestinationsTable() {
    destInitDataTables();
    destInitTableButtons();
    destInitSearchField();
    destInitSearch();
    ims.clearErrorMessage();
}
//
// Initialize DataTables
//
function destInitDataTables() {
    DataTable.ext.errMode = "none";
    destinationsTable = new DataTable("#destinations_table", {
        // Save table state to SessionStorage (-1). This tells DataTables to save state
        // on any update to the sorting/filtering, and to load that table state again
        // when the browsing context comes back to this page.
        "stateSave": true,
        "stateDuration": -1,
        "stateLoadParams": function (_settings, _data) {
            // We only want to restore the table state if the user got here using back or forward buttons.
            // If the user arrived via reload or navigation through the site, we want to start fresh.
            const navType = window.performance.getEntries()[0];
            if (navType instanceof PerformanceNavigationTiming && navType?.type !== "back_forward") {
                return false;
            }
        },
        "deferRender": true,
        "paging": true,
        "lengthChange": false,
        "searching": true,
        "processing": true,
        "scrollX": false, "scrollY": false,
        "layout": {
            "topStart": null,
            "topEnd": null,
            "bottomStart": "info",
            "bottomEnd": "paging",
        },
        // DataTables gets mad if you return a Promise from this function, so we use an inner
        // async function instead.
        // https://datatables.net/forums/discussion/47411/i-always-get-error-when-i-use-table-ajax-reload
        "ajax": function (_data, callback, _settings) {
            async function doAjax() {
                const { json, err } = await ims.fetchNoThrow(ims.urlReplace(url_destinations), null);
                if (err != null || json == null) {
                    ims.setErrorMessage(`Failed to load table: ${err}`);
                    return;
                }
                const destinations = [];
                for (const art of json.art ?? []) {
                    art.type = "art";
                    art.description = art.external_data.description;
                    destinations.push(art);
                }
                for (const camp of json.camp ?? []) {
                    camp.type = "camp";
                    camp.description = camp.external_data.description;
                    destinations.push(camp);
                }
                for (const other of json.other ?? []) {
                    other.type = "other";
                    destinations.push(other);
                }
                callback({ data: destinations });
            }
            doAjax();
        },
        "columns": [
            {
                "name": "destination_name",
                "className": "destination_name text-left all",
                "data": "name",
                "cellType": "th",
            },
            {
                "name": "destination_address",
                "className": "destination_address text-left",
                "data": "location_string",
            },
            {
                "name": "destination_type",
                "className": "destination_type text-left",
                "data": "type",
            },
            {
                "name": "destination_description",
                "className": "destination_description text-left",
                "data": "description",
                "render": renderWithMaxLength(200),
            },
        ],
        "order": [
            [0, "asc"],
        ],
    });
}
function renderWithMaxLength(maxLength) {
    return function (data, type, _dest) {
        switch (type) {
            case "display":
                if ((data?.length ?? 0) > maxLength + 3) {
                    data = data.substring(0, maxLength) + "...";
                }
                // XSS prevention
                return DataTable.render.text().display(data);
            case "sort":
            case "filter":
                return data ?? "";
            case "type":
                return "";
        }
        return undefined;
    };
}
//
// Initialize table buttons
//
function destInitTableButtons() {
    const fragmentParams = ims.windowFragmentParams();
    // Set button defaults
    destShowRows(ims.coalesceRowsPerPage(fragmentParams.get("rows"), ims.getPreferredTableRowsPerPage(), destDefaultRows), false);
}
//
// Initialize search field
//
function destInitSearchField() {
    // Search field handling
    const searchInput = document.getElementById("search_input");
    function searchAndDraw() {
        destReplaceWindowState();
        let q = searchInput.value;
        let isRegex = false;
        let smartSearch = true;
        if (q.startsWith("/") && q.endsWith("/")) {
            isRegex = true;
            smartSearch = false;
            q = q.slice(1, q.length - 1);
        }
        destinationsTable.search(q, isRegex, smartSearch);
        destinationsTable.draw();
    }
    const fragmentParams = ims.windowFragmentParams();
    const queryString = fragmentParams.get("q");
    if (queryString) {
        searchInput.value = queryString;
        searchAndDraw();
    }
    searchInput.addEventListener("input", function (_) {
        // Delay the search in case the user is still typing.
        // This reduces perceived lag, since searching can be
        // very slow, and it's super annoying for a user when
        // the page fully locks up before they're done typing.
        clearTimeout(_destSearchDelayTimer);
        _destSearchDelayTimer = setTimeout(searchAndDraw, _destSearchDelayMs);
    });
    searchInput.addEventListener("keydown", function (e) {
        // No shortcuts when ctrl, alt, or meta is being held down
        if (e.altKey || e.ctrlKey || e.metaKey) {
            return;
        }
    });
}
//
// Initialize search plug-in
//
function destInitSearch() {
}
//
// Show rows button handling
//
function destShowRows(rowsToShow, replaceState) {
    const id = rowsToShow;
    _destShowRows = rowsToShow;
    const item = document.getElementById("show_rows_" + id);
    // Get title from selected item
    const selection = item.getElementsByClassName("name")[0].textContent;
    // Update menu title to reflect selected item
    const menu = document.getElementById("show_rows");
    menu.getElementsByClassName("selection")[0].textContent = selection;
    if (rowsToShow === "all") {
        rowsToShow = "-1";
    }
    if (replaceState) {
        destReplaceWindowState();
    }
    destinationsTable.page.len(ims.parseInt10(rowsToShow));
    destinationsTable.draw();
}
//
// Update the page URL based on the search input and other filters.
//
function destReplaceWindowState() {
    const newParams = [];
    const searchVal = document.getElementById("search_input").value;
    if (searchVal) {
        newParams.push(["q", searchVal]);
    }
    if (_destShowRows != null && _destShowRows !== destDefaultRows) {
        newParams.push(["rows", _destShowRows]);
    }
    const newURL = `${ims.urlReplace(url_viewDestinations)}#${new URLSearchParams(newParams).toString()}`;
    window.history.replaceState(null, "", newURL);
}
