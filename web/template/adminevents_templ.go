// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
//

// See the file COPYRIGHT for copyright information.

//

// Licensed under the Apache License, Version 2.0 (the "License");

// you may not use this file except in compliance with the License.

// You may obtain a copy of the License at

//

//     http://www.apache.org/licenses/LICENSE-2.0

//

// Unless required by applicable law or agreed to in writing, software

// distributed under the License is distributed on an "AS IS" BASIS,

// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

// See the License for the specific language governing permissions and

// limitations under the License.

//

package template

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func AdminEvents(deployment, versionName, versionRef string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Head("Edit Events", "admin_events.js", false).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<body><div class=\"container-fluid\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Header(deployment).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Nav("").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<h1 id=\"doc-title\">Edit Events</h1>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = LoadingOverlay().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<!-- \"Explain permissions\" modal --><div class=\"modal no-print\" id=\"explainModal\" tabindex=\"-1\" aria-labelledby=\"explainModalLabel\" aria-hidden=\"true\"><div class=\"modal-dialog\"><div class=\"modal-content\"><div class=\"modal-header\"><p class=\"modal-title fs-5\" id=\"explainModalLabel\">Current permissions</p><button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button></div><div class=\"modal-body white-space-pre-wrap text-smaller\"></div></div></div></div><p>For each event, you can configure permissions for individuals, positions, onduty positions, or teams. For example:</p><ul><li><strong>person:Tool</strong></li><li><strong>position:007</strong> - grants access to Rangers who are eligible to work shifts for the provided position</li><li><strong>onduty:Operations Manager</strong> - grants access to Rangers currently on-duty for the provided position</li><li><strong>team:Council</strong></li></ul><p>You can also choose when each permission is valid:</p><ul><li>Always: valid all year long</li><li>On-Site: valid only when a matching Ranger is marked \"on-site\" in Clubhouse</li></ul><div class=\"row\" id=\"event_access_container\"><div class=\"col-sm-12 py-1 event_access\"><div class=\"card\"><span class=\"card-header\">Access for <span class=\"event_name\"></span> (<span class=\"access_mode\"></span>): <button type=\"button\" class=\"explain_button badge btn btn-primary float-end\">Explain</button></span><ul class=\"list-group list-group-small list-group-flush card-body\"><li class=\"list-group-item ps-3\"><select class=\"access_validity\" onchange=\"setValidity(this)\"><option value=\"always\">Always</option> <option value=\"onsite\">On-Site</option></select> <button class=\"badge btn btn-danger float-end ms-1\" onclick=\"removeAccess(this)\">X</button> <input class=\"access_expires hidden float-end\" type=\"datetime-local\" onblur=\"setExpires(this)\" title=\"Expiration time, in your browser's time zone\"> <input class=\"btn btn-xs btn-outline-secondary access_expires_button float-end\" type=\"button\" value=\"Set expiration\" onclick=\"showExpiresInput(this)\"> <span class=\"access_expired_text float-end me-2 hidden\"><strong>Expired</strong></span></li></ul><div class=\"card-footer\"><label for=\"access_add\">Add:</label> <input id=\"access_add\" class=\"form-control input-sm auto-width\" type=\"text\" inputmode=\"verbatim\" placeholder=\"person:Tool\" onchange=\"addAccess(this)\"></div></div></div></div><div class=\"row\" id=\"event_new_container\"><div class=\"col-sm-12 event_access\"><label for=\"event_add\">Create New Event:</label> <input id=\"event_add\" class=\"form-control input-sm auto-width\" disabled=\"\" type=\"text\" inputmode=\"verbatim\" placeholder=\"Burn-A-Matic 3000\" onchange=\"addEvent(this)\"></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Footer(versionName, versionRef).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</div></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
